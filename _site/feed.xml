<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-02-16T22:34:51+08:00</updated><id>http://localhost:4000//</id><title type="html">一朵云风</title><subtitle>Yanci is an ios developer from shenzhen, now is working for RaodShowLive. which is an roadshow live service platform.</subtitle><author><name>一朵云风</name></author><entry><title type="html">Translate-LifeStyle-这11条原则将会永远的改变你的生活</title><link href="http://localhost:4000/Translate-LifeStyle-These11RulesWillChangeYourLifeForever/" rel="alternate" type="text/html" title="Translate-LifeStyle-这11条原则将会永远的改变你的生活" /><published>2017-01-23T00:00:00+08:00</published><updated>2017-01-23T00:00:00+08:00</updated><id>http://localhost:4000/Translate-LifeStyle-These11RulesWillChangeYourLifeForever</id><content type="html" xml:base="http://localhost:4000/Translate-LifeStyle-These11RulesWillChangeYourLifeForever/">&lt;h1 id=&quot;section&quot;&gt;这11条原则将会永远的改变你的生活&lt;/h1&gt;

&lt;h3 id=&quot;section-1&quot;&gt;人活在这个世界上，但不知道为了什么&lt;/h3&gt;

&lt;p&gt;那些问着这个问题，并以执行行动，过着生活幸福，健康，富有成效的生活。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;注意!&lt;/h3&gt;

&lt;p&gt;当阅读完本文章后，你将要&lt;strong&gt;做出选择&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;大多数人阅读此文章，是因为他们想要所谓的&lt;em&gt;快乐&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;但是我们规定这个的么？ 我们知道是什么么？ 我们是否尝试过某些令我们快乐的事情，但最后都是无法长久的。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;你离上一次回头看自己，问自己相隔多久了。&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;什么变好了？
什么变得不好了？
什么是我能控制的，能靠我意愿去达成的？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-4&quot;&gt;如果你不想或者持续的花费时间去回顾分析你的行为和决定：&lt;/h3&gt;

&lt;p&gt;你将会继续：&lt;/p&gt;

&lt;p&gt;… 面对同样类型的人&lt;/p&gt;

&lt;p&gt;… 获得同样类型的工作&lt;/p&gt;

&lt;p&gt;… 和在你的生活中犯着同样的错误&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“一个问题是没有办法让这个能产生这个问题想法的事物来解决的” — Albert Einste&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-5&quot;&gt;找到你的战争节奏&lt;/h3&gt;

&lt;p&gt;你多常需要一个自我回顾，你正在处于什么阶段，以及发现什么拖延你的后腿?&lt;/p&gt;

&lt;p&gt;每两个星期？ 每个月？ 每年 ？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;你有责任去了解自己&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;接下来你如何安排剩下的生活。 只有你自己可以帮助自己。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;同时，你或许应该考虑一下我给你生活上提的11条建议&lt;/h3&gt;

&lt;h3 id=&quot;section-7&quot;&gt;1. 对权威毫无质疑&lt;/h3&gt;

&lt;p&gt;因为你从来未做过某些事情，但不代表你不应该做。 因为我们经常做这样的事情并不意味着我们应该继续做。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“合适的人会适应这个世界，而不合适的人会让这个世界适应他。 因此，所有的进展依赖这个不合适的人”
— George Bernard Shaw &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-8&quot;&gt;2. 为自己考虑&lt;/h3&gt;

&lt;p&gt;每次你接受一个观点，思想，哲学的时候，你都在建立一个赞同的观点。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“没有一个健康的衡量标准来很好地适应这个病态的社会”
— Krishnamurti&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;怀疑论是额外的工作，因为它需要你去思考和挑战。&lt;/p&gt;

&lt;p&gt;自满是简单的，因为它不需要太多的能力来滚下去。&lt;/p&gt;

&lt;p&gt;你想要主宰生活还是被生活主宰？ &lt;/p&gt;

&lt;p&gt;投入工作是自我驱动目的的先决条件。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;3. 问你自己以及你的经历&lt;/h3&gt;

&lt;p&gt;你现在相信某些东西，并不代表你应该或者将要继续相信。 &lt;/p&gt;

&lt;p&gt;如果这些列表清单并没有改变我生活的下一个五年，则代表着我并没有进步。 我没有进化。我并没有适应自我世界的适应。一年前，这个清单列表有七项那么长。&lt;/p&gt;

&lt;p&gt;不断地询问自己的信仰和修辞是否是一种正确的方式来建立对你所熟悉事情的自信以及发现新鲜的事情。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;4. 不要假设，要根据证据去论证自己的想法&lt;/h3&gt;

&lt;p&gt;每一次我们猜想的时候，我们都在忽略事实所在。它或许并不是撒谎，但它正向着这个方向。&lt;/p&gt;

&lt;p&gt;这个规则是学习和教育的基石。通过探索真理，我们被迫去考虑所有的事实。&lt;/p&gt;

&lt;p&gt;想一想我们中的有多少人会真正相信气候变化的真实性以及结果，如果我们每个人都经历过的话。&lt;/p&gt;

&lt;p&gt;因为你知道某些东西，但并不意味着你是正确的。&lt;/p&gt;

&lt;p&gt;你同样也有责任来验证和提供你自身的事实。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;5. 你或许错了&lt;/h3&gt;

&lt;p&gt;当你和别人争论的时候，你是否听得入他人的话？ 
 你是否很有兴趣的提出问题？ 
 当你带有建议，倾诉，或者从某些地方了解到某些东西而开口的时候，你或许就错了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;人们最完美的地方，在于发现他人的不完美。 
   — Saint Augustine&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在社会上，承认你是错误的是一个有效的方式来减少工作团队间的矛盾，因为它能够很快的减轻不和谐环境。 一旦你横着脖子，则无论对错。突然之间越来越多的人向事实真相公开。&lt;/p&gt;

&lt;p&gt;最快的方式来抵触他人是不倾听他人意见以及未做事先沟通。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;你不能教会一个人任何事情。你只能帮他找寻自己。 — Galileo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-12&quot;&gt;6. 不要太过于自我，每个人都活在他本身的世界&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;当我们自己拥有某些东西的时候，我们会认为他们也知道我们所想，我们会尝试去强加自己的世界到他人的世界中。 — Don Miguel Ruiz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们每个人都有一套有着自己经验和理解的世界观。&lt;/p&gt;

&lt;p&gt;当某人侮辱你的时候，是否因为他们的想法？ 又或许是因为他们有着经常性批评自己的习惯。&lt;/p&gt;

&lt;p&gt;如果某人判定你的时候，是否因为你有缺陷？ 又或许是因为他们有着经常判定他们自己的习惯。&lt;/p&gt;

&lt;p&gt;你需要记住的是人们是从他们的世界观来和你交流，这是很容易被你所知以及谅解的。&lt;/p&gt;

&lt;p&gt;你听从他人的越多，做你自己也就越少。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你自己并没有拥有什么的时候，你成为免疫黑魔法师，没有咒语可以影响你，不论它有多么强大。— Don Miguel Ruiz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-13&quot;&gt;7. 做最好的自己，无论你身处哪里，你拥有什么&lt;/h3&gt;

&lt;p&gt;你是唯一一个能对自己负责的人。&lt;/p&gt;

&lt;p&gt;你能控制什么，不能控制什么。&lt;/p&gt;

&lt;p&gt;你没有借口不去做你所能控制的事情。&lt;/p&gt;

&lt;p&gt;这个领域是你的感知，定义。如果你每天都能这样做，你会发现在你的环境中越来越多的事情在你的掌控之中。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;从你所在的地方开始，用你所拥有的。做你所能做的。 — Arthur Ashe&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;这个需要持续,每日的行动&lt;/strong&gt; 这个需要耐心。 这个需要投入工作。&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;8. 腾出时间玩，因为旅程比目的地更重要&lt;/h3&gt;

&lt;p&gt;有一个整个领域的经验证据验证这样的观点，玩，增强了头脑，记忆，创造力以及其他; 情绪。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;积极心态很少是不好的时候。— Daniel Gurevich&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-15&quot;&gt;9. 停下脚步，放大和观察自己&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*KDItfverM3X06jqEB-j4HQ.gif&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你不花费时间在你的日程里去想你所想，做你所做，或者构造你所构造，你并没有前进。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们不想通过在国外但熟悉的酒店之间的照片来寻找世界，我们的目标是以一种让它改变我们的速度去体验它。— Tim Ferris&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;花费时间来做这些是投入你的能力来提高。 它或许不会一下子出成果，但如果出成果的话，它将会富有智慧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;生命是永恒的拓展境界的追求。 — Scott Woods&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-16&quot;&gt;10. 疑惑的时候，相信你的直觉&lt;/h3&gt;
&lt;p&gt;没有万能的公式。&lt;/p&gt;

&lt;p&gt;你无法去弄清楚任何事情。&lt;/p&gt;

&lt;p&gt;当它来临的时候，你生命结束的时候，你躺在你的病床上，你会恐惧什么？ &lt;/p&gt;

&lt;p&gt;很有可能你感觉到后悔。&lt;/p&gt;

&lt;p&gt;去世最后悔的前两样是：&lt;/p&gt;

&lt;p&gt;没有活出我想要的生活 &amp;amp; 工作太辛苦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果目标是快乐而没有后悔，你拿出什么行动来让你的生活达到这个目标？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你做了一些自己都觉得不应该做的事情，那可能会来的晚了些。&lt;/p&gt;

&lt;p&gt;如果你依照你的信念，做一些你认可以及符合意愿的事情，你没有变糟糕。。。 很好，你仍然是错的，但是你不会后悔。&lt;/p&gt;

&lt;p&gt;你会为学习感到痛苦而不是后悔感到痛苦。 你将会继续新的一天。&lt;/p&gt;

&lt;h3 id=&quot;section-17&quot;&gt;感恩的心&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;这个是不可协商的&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;你无法控制你对事物感觉的方式。&lt;/p&gt;

&lt;p&gt;如果某个人对你说谎，你或许会疯掉。&lt;/p&gt;

&lt;p&gt;如果某个人欺骗了你，你或许会感觉到背叛。&lt;/p&gt;

&lt;p&gt;如果某个人侮辱了你，你或许会感觉到抵触。&lt;/p&gt;

&lt;p&gt;你是可以感受到你所感受的。 这就是感觉的工作。&lt;/p&gt;

&lt;p&gt;你不应该因为你的感觉而去伤害他人，掊击，或者是打败自己。&lt;/p&gt;

&lt;p&gt;行为产生于感觉之后。 它在于你是因为某一时刻的冲动而行动，还是你想要从另外一种心态而行动。&lt;/p&gt;

&lt;p&gt;越早你可以调节好你的情绪反应以及开始以你最好的方式去对待这个世界，越早你不需要依赖他人的验证以及影响。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;冒着荒谬的风险，让我说真正的革命者是有着伟大的爱来领导前行的。 — Ernesto Guevara&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;花费一些时间你将来需要处理的，直到你可以感觉到爱。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;下一次你讲东西的时候，思考一下:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“那个评论是不是一个判断？”&lt;/p&gt;

&lt;p&gt;“那是不是我心中所想?”&lt;/p&gt;

&lt;p&gt;“那是不是很棒?”&lt;/p&gt;

&lt;p&gt;你友好的响应他人，那么你自己就越能感觉到友好。 &lt;/p&gt;

&lt;p&gt;。。。&lt;/p&gt;

&lt;h4 id=&quot;section-18&quot;&gt;是时候做出选择了&lt;/h4&gt;

&lt;p&gt;你生活在那种方式？&lt;/p&gt;

&lt;p&gt;生活中谁是你的榜样？&lt;/p&gt;

&lt;p&gt;今天，你读了这些。 你应该从中收获些什么。 它对你意味着什么，同时也是你应该问自己一下这些问题。&lt;/p&gt;

&lt;p&gt;回到这篇文章，并提出一些能让你产生共鸣的问题。&lt;/p&gt;

&lt;p&gt;制定你自己的规则列表。 这一个是我的。 这是给我的。 我分享了它，但我们都不同。 这不意味着你的列表将意味着相同的事情。&lt;/p&gt;

&lt;h4 id=&quot;section-19&quot;&gt;就是这样&lt;/h4&gt;
&lt;p&gt;现在就决定。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你想要异于常人，你就必须开始跟随行动。 — Gary Vaynerchuck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你愿意投入工作来获得幸福？ 你愿意从你的脸中看出成功以及决定就这么做？ 你是否愿意去停止你所做的东西来
确定自己的优先级。&lt;/p&gt;

&lt;h4 id=&quot;section-20&quot;&gt;你或许会或许不会&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;知道是不够的，我们必须实践。 愿意是不够的，我们必须行动。 — Bruce Lee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-21&quot;&gt;它取决于你自己&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;一年后，你希望你从今天开始  — Karen Lamb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;end&quot;&gt;END&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;日期&lt;/th&gt;
      &lt;th&gt;作者&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2017-02-03&lt;/td&gt;
      &lt;td&gt;YC&lt;/td&gt;
      &lt;td&gt;初步翻译完成&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>一朵云风</name></author><category term="lifeStyle translate" /><summary type="html">Translate-LifeStyle-这11条原则将会永远的改变你的生活</summary></entry><entry><title type="html">OpenSource ReactiveCocoa</title><link href="http://localhost:4000/iOS-OpenSource-Learning-ReactiveCocoa/" rel="alternate" type="text/html" title="OpenSource ReactiveCocoa" /><published>2017-01-22T00:00:00+08:00</published><updated>2017-01-22T00:00:00+08:00</updated><id>http://localhost:4000/iOS-OpenSource-Learning-ReactiveCocoa</id><content type="html" xml:base="http://localhost:4000/iOS-OpenSource-Learning-ReactiveCocoa/">&lt;h3 id=&quot;section&quot;&gt;目录&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;函数响应式编程(FRP)&lt;/li&gt;
  &lt;li&gt;控制流和数据流&lt;/li&gt;
  &lt;li&gt;Pull-Driven 和 Push-Driven&lt;/li&gt;
  &lt;li&gt;ReactiveObjc
    &lt;ul&gt;
      &lt;li&gt;Streams&lt;/li&gt;
      &lt;li&gt;Signals&lt;/li&gt;
      &lt;li&gt;Subscription&lt;/li&gt;
      &lt;li&gt;Subjects&lt;/li&gt;
      &lt;li&gt;Commands&lt;/li&gt;
      &lt;li&gt;Connections&lt;/li&gt;
      &lt;li&gt;Sequences&lt;/li&gt;
      &lt;li&gt;Disposables&lt;/li&gt;
      &lt;li&gt;Shedulers&lt;/li&gt;
      &lt;li&gt;ValueType &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use ReactiveObjc in MVVM&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;函数响应式编程&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B&quot;&gt;命令式编程&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80&quot;&gt;函数式编程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B&quot;&gt;响应式编程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_reactive_programming&quot;&gt;函数响应式编程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;热信号和冷信号&lt;/h3&gt;
&lt;p&gt;冷信号：除非有人订阅他们，他们是不会启动并发送的。每增加一个订阅，他们都会重复地多发送一个信号。&lt;/p&gt;

&lt;p&gt;热信号： 立即工作的信号。&lt;/p&gt;

&lt;h3 id=&quot;pull-driven--push-driven&quot;&gt;pull-driven 和 push-driven&lt;/h3&gt;
&lt;p&gt;push-driven: 在创建信号的时候，信号不会被立即赋值，之后才会赋值(举个例子:网络请求回来的结果或者是任意的用户输入的结果)。&lt;/p&gt;

&lt;p&gt;pull-driven: 在创建信号的同事序列中的值就会被确定下来，我们可以从流中一个个地查询值。&lt;/p&gt;

&lt;h3 id=&quot;reactiveobjc&quot;&gt;ReactiveObjc&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Streams  &lt;/li&gt;
  &lt;li&gt;Signals&lt;/li&gt;
  &lt;li&gt;Subscription&lt;/li&gt;
  &lt;li&gt;Subjects&lt;/li&gt;
  &lt;li&gt;Commands&lt;/li&gt;
  &lt;li&gt;Connections&lt;/li&gt;
  &lt;li&gt;Sequences&lt;/li&gt;
  &lt;li&gt;Disposables&lt;/li&gt;
  &lt;li&gt;Shedulers&lt;/li&gt;
  &lt;li&gt;ValueType &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-reactiveobjc-in-mvvm&quot;&gt;Use ReactiveObjc in MVVM&lt;/h3&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/functional-reactive-programming&quot;&gt;http://www.infoq.com/cn/articles/functional-reactive-programming&lt;/a&gt;
&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot;&gt;https://github.com/ReactiveCocoa/ReactiveCocoa&lt;/a&gt;&lt;/p&gt;</content><author><name>一朵云风</name></author><category term="iOS opensource reactivecocoa FRP" /><summary type="html">OpenSource ReactiveCocoa</summary></entry><entry><title type="html">Book-Learning-iOS核心动画高级技巧</title><link href="http://localhost:4000/Book-Learning-iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/" rel="alternate" type="text/html" title="Book-Learning-iOS核心动画高级技巧" /><published>2017-01-22T00:00:00+08:00</published><updated>2017-01-22T00:00:00+08:00</updated><id>http://localhost:4000/Book-Learning-iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7</id><content type="html" xml:base="http://localhost:4000/Book-Learning-iOS%E6%A0%B8%E5%BF%83%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/">&lt;p&gt;&lt;strong&gt;阅读iOS核心动画高级技巧读书笔记&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;图层树&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;寄宿图&lt;/h3&gt;

&lt;p&gt;iOS使用了以下的坐标系统：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;点 – 在iOS和Mac OS中最常用的坐标体系。 点就像是虚拟的像素，也被称作逻辑像素。在标准设备上，一个点就是一个像素，但是在Retina设备上，一个点等于2*2个像素。iOS用点作为屏幕的坐标测算体系就是为了在Retina设备和普通设备上能有一致的视觉效果。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;像素 – 物理像素坐标并不会用来屏幕布局，但是仍然和图片有相对关系。UIImage是一个屏幕分辨率解决方案，所以指定点来度量大小。但是一些底层的图片表示如CGImage就会使用像素，所以你要清楚再Retina设备和普通设备上，他们表现出来的不同的大小。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;单位 – 对于与图片大小或是图层边界相关的显示，单位坐标是一个方便的度量方式，当大小改变的时候，也不需要再次调整。单位坐标OpenGL这种纹理左边系统中用得很多，Core Animation中也用到了单位坐标。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;图层几何学&lt;/h3&gt;

&lt;h3 id=&quot;section-3&quot;&gt;视觉效果&lt;/h3&gt;

&lt;h3 id=&quot;section-4&quot;&gt;变换&lt;/h3&gt;

&lt;h3 id=&quot;section-5&quot;&gt;专用图层&lt;/h3&gt;

&lt;h3 id=&quot;section-6&quot;&gt;隐式动画&lt;/h3&gt;

&lt;h3 id=&quot;section-7&quot;&gt;显示动画&lt;/h3&gt;

&lt;h3 id=&quot;section-8&quot;&gt;图层时间&lt;/h3&gt;

&lt;h3 id=&quot;section-9&quot;&gt;缓冲&lt;/h3&gt;

&lt;h3 id=&quot;section-10&quot;&gt;基于定时器的动画&lt;/h3&gt;

&lt;h3 id=&quot;section-11&quot;&gt;性能调优&lt;/h3&gt;
&lt;p&gt;当运行一段动画时候，这个过程会被四个分离的阶段打破：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;布局 - 这是准备你的视图/图层的层级关系，以 及设置图层属性（位置，边框等等）的阶段。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显示 - 这是图层的寄宿图片被绘制的阶段。绘制有可能涉及你的 &lt;em&gt;-drawRect:&lt;/em&gt;和 &lt;em&gt;-drawLayer:inContext:&lt;/em&gt;方法的调用路径。 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;准备 - 这是Core Animation准备发送动画数据到渲染服务的阶段。这同时也是Core Animation将要执行一些别的事物例如解码动画过程中将要显示的图片的时间点。发送到渲染服务器的时候（图层实际上是由很多小物体组成的特别重量级的对象），太多的图层就会引起CPU的瓶颈。这就限制了一次展示的图层个数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重绘 - 主要由重叠的半透明图层引起。GPU的填充比例（用颜色填充像素的比率）是有限的，所以需要避免重绘（每一帧用相同的像素填充多次）的发生。在现代iOS设备上，GPU都会应对重绘；即使是iPhone 3GS都可以处理高达2.5的重绘比率，并仍然保持60帧率的渲染 （这意味着你可以绘制一个半的整屏的冗余信息，二不影响性能），并且新设备可以处理更多。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;离屏绘制  - 这发生在当不能直接在屏幕上绘制，并且必须绘制到离屏图片上下文中的时候。 离屏绘制发生在基于CPU或者是GPU的渲染，或者是为离屏图片分配额外内存，以及切换绘制上下文，这些都会降低GPU性能。对于特定图层效果的使用，比如圆角，图层遮罩，阴影或者是图层光栅化都会强制Core Animation提前渲染图层的离屏绘制。但这不意味着你需要避免使用这些效果，只是要明白这会带来性能的负面影响。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;过大的图片 - 如果视图绘制超出GPU支持的2048&lt;em&gt;2048或者4096&lt;/em&gt;4096尺寸的纹理，就必须要用CPU在图层每次显示之前对图片预处理，同样也会降低性能。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Color Blended Layers&lt;/strong&gt; - 这个选项基于渲染程度对屏幕中的混合区域进行绿到红的高亮（也就是多个半透明图层的叠加）。由于重绘的原因，混合对GPU性能会有影响，同时也是滑动或者动画帧率下降的罪魁祸首之一。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ColorHitsGreenAndMissesRed&lt;/strong&gt; - 当使用shouldRasterizep属性的时候，耗时的图层绘制会被缓存，然后当做一个简单的扁平图片呈现。当缓存再生的时候这个选项就用红色对栅格化图层进行了高亮。如果缓存频繁再生的话，就意味着栅格化可能会有负面的性能影响了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Color Copied Images&lt;/strong&gt; - 有时候寄宿图片的生成意味着Core Animation被强制生成一些图片，然后发送到渲染服务器，而不是简单的指向原始指针。这个选项把这些图片渲染成蓝色。复制图片对内存和CPU使用来说都是一项非常昂贵的操作，所以应该尽可能的避免。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Color Immediately&lt;/strong&gt; - 通常Core Animation Instruments以每毫秒10次的频率更新图层调试颜色。 对某些效果来说，这显然太慢了。 这个选项就可以用来设置每帧都更新。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Color Misaligned Images&lt;/strong&gt; - 这里会高亮那些被缩放或者拉伸以及没有正确对齐到像素边界的图片(也就是非整形坐标)。 这些中的大多数通常都会导致图片的不正常缩放，如果把一张大图当缩略图显示，或者不正确地模糊图像，那么这个选项将会帮你识别出问题所在。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Color Offscreen-Rendered Yellow&lt;/strong&gt; - 这里会把那些需要离屏渲染的图层高亮成黄色。这些图层很可能需要用 shadowPath 或者 shouldRasterize来优化。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Color OpenGL Fast Path Blue&lt;/strong&gt; - 这个选项会对任何直接使用OpenGL绘制的图层进行高亮。如果仅仅使用UIKit或者Core Animation的API，那么不会有任何效果。如果使用GLKView或者CAEAGLayer，那如果不显示蓝色块的话，就意味着你正在强制CPU渲染额外的纹理，而不是绘制到屏幕。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Flash Updated Regions&lt;/strong&gt; - 这个选项会对重绘的内容高亮成黄色(也就是任何在软件层面使用Core Graphics绘制的图层)。这种绘图的速度很慢。如果频繁发生这种情况的话，这意味着有一个隐藏的bug或者通过增加缓存或者使用替代方案会有提升性能的空间。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-12&quot;&gt;高效绘图&lt;/h3&gt;

&lt;h3 id=&quot;io&quot;&gt;图像IO&lt;/h3&gt;

&lt;h3 id=&quot;section-13&quot;&gt;图层性能&lt;/h3&gt;</content><author><name>一朵云风</name></author><category term="iOS animation" /><summary type="html">Book-Learning-iOS核心动画高级技巧</summary></entry><entry><title type="html">iOS-Learning-iOS闭包</title><link href="http://localhost:4000/iOS-Learning-iOS%E9%97%AD%E5%8C%85/" rel="alternate" type="text/html" title="iOS-Learning-iOS闭包" /><published>2017-01-22T00:00:00+08:00</published><updated>2017-01-22T00:00:00+08:00</updated><id>http://localhost:4000/iOS-Learning-iOS%E9%97%AD%E5%8C%85</id><content type="html" xml:base="http://localhost:4000/iOS-Learning-iOS%E9%97%AD%E5%8C%85/">&lt;h4 id=&quot;section&quot;&gt;目录&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;什么是闭包&lt;/li&gt;
  &lt;li&gt;匿名函数&lt;/li&gt;
  &lt;li&gt;闭包语法&lt;/li&gt;
  &lt;li&gt;自动变量&lt;/li&gt;
  &lt;li&gt;__Block关键字&lt;/li&gt;
  &lt;li&gt;为什么要使用闭包&lt;/li&gt;
  &lt;li&gt;函数作用域与块作用域&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;什么是闭包&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;简单来说，就是带有自动变量(本地)的匿名函数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;匿名函数&lt;/h2&gt;
&lt;p&gt;顾名思义，就是没有名字的函数。在ObjC中，匿名函数需要依靠block(闭包)来实现。&lt;/p&gt;

&lt;p&gt;在C语言中:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a+b=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在Objc中，我们可以使用匿名函数的来实现:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt; &lt;span class=&quot;k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 	&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a+b=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 	&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-3&quot;&gt;闭包语法&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;^ return type (argument list) {expressions} &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;代码如下:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;   &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果返回类型是void的话,你可以这样简写：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;   &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果函数参数为空的话，你可以这样简写：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;   &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-4&quot;&gt;自动变量&lt;/h3&gt;
&lt;p&gt;让我们先来看一段代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;val = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;These values were changed. val = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ques:你觉得执行结果会是什么呢？ &lt;/p&gt;

&lt;p&gt;Answer:These values were changed. val = 10 ?&lt;/p&gt;

&lt;p&gt;Answer:实际输出的是 val = 10。&lt;/p&gt;

&lt;p&gt;Ques:为什么呢？ &lt;/p&gt;

&lt;p&gt;Answser: 
 在源码中，声明了变量fmt和val。自动变量的值将会在闭包表达式编写时候记录，当闭包执行的时候，当时的值会一直保存着，即使你后面修改了变量值，闭包中的变量并未受影响。
 以上就是记录自动变量。&lt;/p&gt;

&lt;h3 id=&quot;block&quot;&gt;Block关键字&lt;/h3&gt;
&lt;p&gt;当自动变量被记录时候，在闭包中的值都是只读的，你无法修改里面的值。
 __block关键字，则使得你能够修改自动变量而不是记录他们。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;Hello, Block!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__block&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__block&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;val = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;These values were changed. val = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Answer:这样就输出: These values were changed。 val = 2&lt;/p&gt;

&lt;p&gt;Ques: 等等，我貌似发现了一点端倪。&lt;/p&gt;

&lt;p&gt;Answer: 竟然被你知道了。&lt;/p&gt;

&lt;p&gt;Ques: 我觉得这和C语言的传值和传地址很类似，__block关键字修饰变量的时候，在闭包中并不是记录值，而是地址。&lt;/p&gt;

&lt;p&gt;Answer: 对! 这就是它的内部实现。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;为什么要使用闭包呢&lt;/h3&gt;

&lt;p&gt;使用闭包，你不需要在全局创建名称函数，或者提供目标-动作回调，可以通过创建一个匿名的本地”方法”，他能够访问作用域内的变量和更加方便执行动作。&lt;/p&gt;

&lt;h3 id=&quot;ios&quot;&gt;iOS是函数作用域还是块作用域&lt;/h3&gt;

&lt;p&gt;任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。 函数作用域就好理解了，定义在函数中的参数和变量在函数外部是不可见的。
  所以iOS是块作用域，而javascript则是&lt;a href=&quot;https://yanci.me/JavaScript-Learning-js%E9%97%AD%E5%8C%85/&quot;&gt;函数作用域&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;end&quot;&gt;End&lt;/h3&gt;</content><author><name>一朵云风</name></author><category term="iOS Block" /><summary type="html">iOS-Learning-iOS闭包</summary></entry><entry><title type="html">Translate-iOS-Architecture-Patterns</title><link href="http://localhost:4000/Translate-iOS-Architecture-Patterns/" rel="alternate" type="text/html" title="Translate-iOS-Architecture-Patterns" /><published>2017-01-16T00:00:00+08:00</published><updated>2017-01-16T00:00:00+08:00</updated><id>http://localhost:4000/Translate-iOS-Architecture-Patterns</id><content type="html" xml:base="http://localhost:4000/Translate-iOS-Architecture-Patterns/">&lt;h3 id=&quot;ios-architecture-patterns&quot;&gt;iOS Architecture Patterns&lt;/h3&gt;

&lt;h4 id=&quot;demystifying-mvc-mvp-mvvm-and-viper&quot;&gt;Demystifying MVC, MVP, MVVM and VIPER&lt;/h4&gt;

&lt;p&gt;对使用iOS中的MVC感觉到奇怪，对切换到MVVM感觉到疑惑？ 听说过VIPER,但不确定它是否名副其实？&lt;/p&gt;

&lt;p&gt;继续阅读，你将会找到以上问题的答案，如果你无法从容的解释这些问题。&lt;/p&gt;

&lt;p&gt;你将会重新构建你的iOS环境中知识架构。 我们将会简单的介绍一些通用架构，通过几个例子从理论，以及实践来比较他们。如果你需要了解更多有关他们的详情，请关注链接。&lt;/p&gt;

&lt;p&gt;掌握好设计模式或许很让人沉迷其中，注意： 你阅读完本文后，或许自己的疑问就迎刃而解，例如这些疑问：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网络请求应该放在哪里 ： 模型 或者 控制器？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我怎样传递一个模型给新视图的视图模型呢 ？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谁创建了VIPER 模式 ： 路由 还是 呈现 ？&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*79nWxPpKgL7JGjYp0HrT6A.png&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;为什么要关注选择一个架构&lt;/h3&gt;
&lt;p&gt;如果你不关注的话，某一天，调试一个非常繁重的类，里面包含很多不同的东西，你将会发现自己无法去寻找和修复任何bugs。。自然地，你也无法清晰的记住这个类作为整个实体，也就是说，你将会忽略很多很重要的细节。
  如果你已经身处在这种情况下，类似这样：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这个类是UIViewController的子类&lt;/li&gt;
  &lt;li&gt;你的数据存储是直接放到UIViewController中&lt;/li&gt;
  &lt;li&gt;你的UIViews几乎没做任何事情&lt;/li&gt;
  &lt;li&gt;模型是个静态的数据结构&lt;/li&gt;
  &lt;li&gt;你的单元测试几乎无覆盖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个会发生，尽管事实上你已经按照Apple的设计指导和完成Apple的MVC模式，但不要感到沮丧。 Apple的MVC设计模式有些问题，我们会晚点讨论它。&lt;/p&gt;

&lt;p&gt;好的架构有一些什么&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;实体间的责任&lt;strong&gt;分配&lt;/strong&gt;清晰明了，有着严格的角色划分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;可测试性&lt;/strong&gt;主要来自第一个特点（别担心：对于某些架构来说，可测试性是非常简单的）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;使用简单&lt;/strong&gt;，维护成本低&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-1&quot;&gt;为什么需要分配&lt;/h4&gt;
&lt;p&gt;分配能够让我们的大脑负载均衡，当我们尝试去了解事物是如何工作的。你思考的更多，开发的更好，你的大脑将更加适应的明白当中复杂性，这样你是正确的。 但是这种能力并不是总是能够很快的线性增长以及触顶。所以最简单的方式就是实体间职责分明，这个遵守&lt;strong&gt;单一责任原则&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;为什么需要可测试&lt;/h4&gt;
&lt;p&gt;这并不是一个什么问题，对那些由于添加新特性或者重构了类导致的&lt;strong&gt;错误问题&lt;/strong&gt;,从而使用单元测试并从中受益的人。意味着这些测试节约了开发者在运行时找到问题，从而避免在用户的机子出现以及需要花费上周的时间才能修复。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;为什么需要使用简单&lt;/h4&gt;
&lt;p&gt;这个并没有什么答案可说，但是值得一提的是最好的代码就是没有写过代码. 代码越少，你的bug越少。 
 这意味着想要写更少代码不应该认为单单是因为程序员的懒惰，你选择一个简洁的方案执行的前提不应该忽略了程序的可维护性。&lt;/p&gt;

&lt;h3 id=&quot;mvx-essentials&quot;&gt;MV(X) essentials&lt;/h3&gt;
&lt;p&gt;如今我们有很多框架设计模式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;MVP&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;MVVM&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.objc.io/issues/13-architecture/viper/&quot;&gt;VIPER&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先当中三个存放它们的实体到三个不同的类别 ：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Models - 存放业务数据或者处理数据相关的数据访问层。例如 ‘Person’ 或者 ‘PersonDataProvider’ 类。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Views - 存放展示层（GUI），在iOS中，前缀是UI的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Controller/Presenter/ViewModel - 模型和视图之间的胶水或者媒介，一般来说，通过用户在视图上的事件触发改变模型，以及模型的更新反映到用户视图上。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;职责分离有助于我们：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;更好的了解它们 （就如我们知道的）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重用它们 （对视图和模型更具有可操作性）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;单独的测试它们 &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;让我们开始MV(X)模式，稍晚些时候再回到VIPER。&lt;/p&gt;

&lt;h3 id=&quot;mvc&quot;&gt;MVC&lt;/h3&gt;

&lt;h4 id=&quot;section-4&quot;&gt;它以前是如何的&lt;/h4&gt;
&lt;p&gt;在我们讨论Apple的MVC之前，我们看看传统的&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*E9A5fOrSr0yVmc7Kly5C6A.png&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;控制器&lt;/strong&gt;是&lt;strong&gt;视图&lt;/strong&gt;和&lt;strong&gt;模型&lt;/strong&gt;的中间媒介，所以它们并不知道双方。 控制器是最少可重用的，对我们来说也是正确的，因为我们必须有个地方存放一些并不适合放到&lt;strong&gt;模型层&lt;/strong&gt;负责的业务逻辑。&lt;/p&gt;

&lt;p&gt;理论上来说，它看起来非常直截了当，但是你感觉到什么不对劲了不？你甚至听说用户认为MVC其实是 &lt;strong&gt;Massive View Controller&lt;/strong&gt; 。再者，视图控制器承载东西过多也成为了iOS开发者的一个重大话题。为什么会如此呢，苹果使用传统的MVC并只是提高它一点点。	&lt;/p&gt;

&lt;h3 id=&quot;apples-mvc&quot;&gt;Apple’s MVC&lt;/h3&gt;

&lt;h4 id=&quot;reality&quot;&gt;Reality&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*PkWjDU0jqGJOB972cMsrnA.png&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cocoa MVC鼓励用户编写 &lt;strong&gt;Massive&lt;/strong&gt; View Controllers,因为他们包含在&lt;strong&gt;视图&lt;/strong&gt;的生命周期，很难说他们是独立的。尽管你可以将部分业务逻辑以及数据转换放到&lt;strong&gt;模型&lt;/strong&gt;，你并没有太多机会可以将部分工作放到&lt;strong&gt;视图&lt;/strong&gt;，绝大部分时间，视图的职责是是发送行为给&lt;strong&gt;控制器&lt;/strong&gt; 。 视图控制器作为回调和所有东西的数据源，同时也分发和取消网络请求等。&lt;/p&gt;

&lt;p&gt;你是不是很常遇到这样的代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueReusableCellWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserCell&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;userCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configureWithUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个列表行，通过视图绑定模型，这样是违反MVC的原则的，但是这个经常发生，程序员们并不觉得有什么问题。如果你很严格的遵照MVC，通过控制器来配置列表行，而不是将模型传到视图中，这个将会增加控制器的代码量。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cocoa MVC 无疑是 Massive View Controller&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个问题或许不会显露出来，直到你使用&lt;strong&gt;单元测试&lt;/strong&gt;（极有可能，你的工程中已经存在）。由于你的控制器和视图粘合的很紧，它将会难以测试，因为当你写控制器的时候，你不得不非常创意的模拟视图的创建以及生命周期等，这样你的业务逻辑尽可能与视图布局分离开来。&lt;/p&gt;

&lt;p&gt;让我们来看一个简单的演示例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt; &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Model&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// View + Controller&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;showGreetingButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greetingLabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showGreetingButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;didTapButton:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// layout code goes here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Assembling of MVC&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;David&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blaine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;MVC 组装能够在展现的视图控制器执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个看起来是否难以调试 ？ 我们可以将&lt;strong&gt;Greeting&lt;/strong&gt;放到&lt;strong&gt;GreetingModel&lt;/strong&gt;来单独测试它， 但是我们无法测试任何展示逻辑 （尽管例子上的逻辑不多）。 在&lt;strong&gt;GreetingViewController&lt;/strong&gt;中的&lt;strong&gt;UIView&lt;/strong&gt;相关方法（viewDidLoad,didTapButton）会加载所有的视图，这对单元测试是很不友好的。&lt;/p&gt;

&lt;p&gt;事实上，在模拟器上加载和测试 &lt;strong&gt;UIViews&lt;/strong&gt;（e.g.iPhone4S）并不能保证它能够在其他设备上（e.g.iPad)工作得很好，因此我建议移除掉你单元测试配置中的 “Host Application”以及在真机上跑测试。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;View&lt;/em&gt;和&lt;em&gt;Controller&lt;/em&gt;之间的交互事实上在单元测试中不可测试的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就如同所说的那样，Cocoa MVC看起来似乎是一个非常不友好的模式。让我们对比一下它与文章开头的几个特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;分布 - &lt;strong&gt;View&lt;/strong&gt; 和 &lt;strong&gt;Model&lt;/strong&gt; 实际上是分离的，但是&lt;strong&gt;View&lt;/strong&gt;和&lt;strong&gt;Controller&lt;/strong&gt;却耦合太深。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可测试性 - 因为耦合性太深，你只能测试你的&lt;strong&gt;Model&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用性 - 对比其他模式代码最少。 除此之外，开发者相对比较熟悉它，同时它也方便给那些经验不足的开发者维护。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cocoa MVC 是你的选择，如果你不想要花费太多时间去调研你的框架，或者是你的项目比较小，不值得花费太多的维护成本。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cocoa MVC 就开发速度来说，是最好的架构模式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mvp&quot;&gt;MVP&lt;/h3&gt;

&lt;h4 id=&quot;cocoa-mvcs-promises-delivered&quot;&gt;Cocoa MVC’s promises delivered&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*hKUCPEHg6TDz6gtOlnFYwQ.png&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它看起来是不是很像Apple的MVC ? 是的，确实是，它的名称叫做&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;MVP&lt;/a&gt; (Passive View variant)。等一等。。。 这是否意味着Apple的MVC模式实际上是MVP? 
不，当然不，你回头想一想，&lt;strong&gt;View&lt;/strong&gt;和&lt;strong&gt;Controller&lt;/strong&gt;是紧紧耦合在一起的，而MVP的中间层，&lt;strong&gt;Presenter&lt;/strong&gt;，并没有和视图控制器的生命周期联系，&lt;strong&gt;View&lt;/strong&gt;可以很容易被模拟，所以在&lt;strong&gt;Presenter&lt;/strong&gt;事实上是没有任何布局代码的，但它负责更新&lt;strong&gt;View&lt;/strong&gt;的数据和状态。	&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*mQVS34naM6TD2Fj4hU-LxA.jpeg&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我想告诉你的是，&lt;strong&gt;UIViewController&lt;/strong&gt;其实是&lt;strong&gt;View&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就&lt;strong&gt;MVP&lt;/strong&gt;而言，控制器子类实际上是&lt;strong&gt;Views&lt;/strong&gt;而不是&lt;strong&gt;Presenters&lt;/strong&gt;。区别在于测试性较强，会损耗开发速度，因为你必须要处理数据和事件绑定，接下来看以下例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Model&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewPresenter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingPresenter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewPresenter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingView&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewPresenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;showGreetingButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greetingLabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showGreetingButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;didTapButton:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// layout code goes here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Assembling of MVP&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;David&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blaine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;presenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;section-5&quot;&gt;有关组合重要信息&lt;/h4&gt;

&lt;p&gt;MVP是第一个展示三个独立层组合的模式问题。因为我们并不希望&lt;strong&gt;View&lt;/strong&gt;与&lt;strong&gt;Model&lt;/strong&gt;有什么交集，同时在展示控制器(实际上是&lt;strong&gt;View&lt;/strong&gt;)来完成组合动作也是不合理的，我们必须在其他地方做处理。例如，我们可以创建一个应用程式&lt;strong&gt;Router&lt;/strong&gt;服务，用来完成组装和&lt;strong&gt;View-to-View&lt;/strong&gt;展示。这个问题	不只是在MVP模式，在&lt;strong&gt;接下来的模式&lt;/strong&gt;也存在类似问题。&lt;/p&gt;

&lt;p&gt;让我们看看&lt;strong&gt;MVP&lt;/strong&gt;的特征：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;分布&lt;/strong&gt; - 我们大部分责任都在分类 &lt;strong&gt;Presenter&lt;/strong&gt;和&lt;strong&gt;Model&lt;/strong&gt;，以及一个非常轻量的&lt;strong&gt;View&lt;/strong&gt;（在上面的例子中,&lt;strong&gt;Model&lt;/strong&gt;也是轻量的）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;可测试性&lt;/strong&gt; - 非常棒，因为是视图的轻量级别，我们可以很方便的测试大部分逻辑。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;使用性&lt;/strong&gt; - 在我们这个不切实际且简单的例子中，代码量是MVC的双倍，同时，MVP的目的是非常清晰的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;iOS中的MVP意味着可测试性好，同时代码量大。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mvp-1&quot;&gt;MVP&lt;/h3&gt;

&lt;h4 id=&quot;with-bindings-and-hooters&quot;&gt;With Bindings and Hooters&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*bkB6Ho_G5De47IkJpaX5XQ.png&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有另外一种形式的MVP – 管理控制器MVP。 这个变体包含&lt;strong&gt;View&lt;/strong&gt;和&lt;strong&gt;Model&lt;/strong&gt;直接绑定，&lt;strong&gt;Presenter&lt;/strong&gt;仍然处理来自&lt;strong&gt;View&lt;/strong&gt;的事件以及修改&lt;strong&gt;View&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;当时正如我们之前所说，责任不清晰分配是不友好的，以及&lt;strong&gt;View&lt;/strong&gt;和&lt;strong&gt;Model&lt;/strong&gt;的紧耦合。这个与桌面式Cocoa开发环境很类似。
 与传统的MVC一样，我并没有想到任何一个亮点能为这个糟糕的架构写个例子。&lt;/p&gt;

&lt;h3 id=&quot;mvvm&quot;&gt;MVVM&lt;/h3&gt;
&lt;p&gt;#### The latest and the greatest of the MV(X) kind&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;MVVM&lt;/a&gt;是最新的MV(X)类型，让我们看看它是否会出现MV(X)之前遇到的问题。&lt;/p&gt;

&lt;p&gt;理论上来说 Model-View-ViewModel 看起来非常好。 &lt;strong&gt;View&lt;/strong&gt;和&lt;strong&gt;Model&lt;/strong&gt;我们非常熟悉，但是&lt;strong&gt;Mediator&lt;/strong&gt;，则是以&lt;strong&gt;View Model&lt;/strong&gt;呈现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*uhPpTHYzTmHGrAZy8hiM7w.png&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它和MVP非常类似：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MVVM将视图控制器认为是视图&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;和&lt;strong&gt;Model&lt;/strong&gt;松耦合&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此之外，&lt;strong&gt;binding&lt;/strong&gt;与管理版MVP类似。
然而，绑定并不是&lt;strong&gt;View&lt;/strong&gt;和&lt;strong&gt;Model&lt;/strong&gt;之间，而是在&lt;strong&gt;View&lt;/strong&gt;和&lt;strong&gt;View Model&lt;/strong&gt;之间。&lt;/p&gt;

&lt;p&gt;因此，iOS中的&lt;strong&gt;View Model&lt;/strong&gt;究竟是什么呢？它是&lt;strong&gt;View&lt;/strong&gt;的依赖展示以及状态。 &lt;strong&gt;View Model&lt;/strong&gt; 触发&lt;strong&gt;Model&lt;/strong&gt;的改变以及通过更新模型自更新，由于我们绑定了&lt;strong&gt;View&lt;/strong&gt;和&lt;strong&gt;View Model&lt;/strong&gt;，最先的将会对应更新。&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;绑定&lt;/h4&gt;
&lt;p&gt;我在MVP部分简单的提到过它们，让我们在深入的讨论一下。
绑定是来自于OSX开发的工具箱，但是我们在iOS工具箱并没有看到。当然，我们有KVO以及通知，但它们并没有绑定来的方便。
因此，我们并不想去重写它们，我们有两个选择：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;其中一个KVO绑定的库像&lt;a href=&quot;https://github.com/Raizlabs/RZDataBinding&quot;&gt;RZDataBinding&lt;/a&gt;或者是&lt;a href=&quot;https://github.com/SwiftBond/Bond&quot;&gt;SwiftBond&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;全面的&lt;a href=&quot;https://gist.github.com/JaviLorbada/4a7bd6129275ebefd5a6&quot;&gt;响应式编程&lt;/a&gt;例如 &lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CB4QFjAAahUKEwj2l6rZv5jJAhUFUhQKHWahCKs&amp;amp;url=https%3A%2F%2Fgithub.com%2FReactiveCocoa%2FReactiveCocoa&amp;amp;usg=AFQjCNHM-pOkluiSuPsaVwVujCDTknVFUA&amp;amp;sig2=54zu-ATo8vDMvtXbxZYTvQ&quot;&gt;ReactiveCocoa&lt;/a&gt;，&lt;a href=&quot;https://github.com/ReactiveX/RxSwift/&quot;&gt;RxSwift&lt;/a&gt;或者是&lt;a href=&quot;https://github.com/mxcl/PromiseKit&quot;&gt;PromiseKit&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事实上，在今天，当你听到”MVVM”–你将会想到ReactiveCocoa等。尽管它能够通过简单的绑定来实现MVVM，ReactiveCocoa（或者siblings）能够令你最大的使用MVVM。&lt;/p&gt;

&lt;p&gt;有些关于响应式框架的事实：能力越大，责任越大。当你使用&lt;em&gt;reactive&lt;/em&gt;时候，会很容易搞混事情。也就是说，如果你做错了东西，你会花费非常多的时间来调试程序，让我们看看这个调用栈。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*WGIs3XQL1MtKiyApr-m9bg.png&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在我们这个简单的例子中，FRF框架和KVO是过度使用的，事实上我们应该显示调用&lt;strong&gt;View Model&lt;/strong&gt;来使用&lt;em&gt;showGreeting&lt;/em&gt;方法更新，和使用&lt;em&gt;greetingDidChange&lt;/em&gt;回调方法的一些相关属性。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt; &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Model&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewModelProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greetingDidChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;GreetingViewModelProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// function to call when greeting did change&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewModelProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;didSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;greetingDidChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greetingDidChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;GreetingViewModelProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewModelProtocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;didSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingDidChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;showGreetingButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greetingLabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showGreetingButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;showGreeting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// layout code goes here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Assembling of MVVM&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;David&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blaine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;
 
    
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;再次回到我们的&lt;em&gt;特征&lt;/em&gt;评定：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;分布&lt;/strong&gt; 在我们的小例子中并不清晰，但事实上，MVVM的&lt;strong&gt;View&lt;/strong&gt;相对于MVP的&lt;strong&gt;View&lt;/strong&gt;有着更多的责任。因为前者是通过设置绑定，从&lt;strong&gt;View Model&lt;/strong&gt;中来更新状态，后者是将所有事件传递给&lt;strong&gt;Presenter&lt;/strong&gt;，并不更新自身。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;可测性&lt;/strong&gt; &lt;strong&gt;View Model&lt;/strong&gt;与&lt;strong&gt;View&lt;/strong&gt;没有任何联系，这个允许我们很方便的测试。&lt;strong&gt;View&lt;/strong&gt;或许也是可以测试，但是因为依赖UIKit，我们往往会跳过它。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;使用性&lt;/strong&gt; 代码量和我们之前的MVP模式例子大致相同，但是在实际应用中，你必须要从&lt;strong&gt;View&lt;/strong&gt;传递所有事件给&lt;strong&gt;Presenter&lt;/strong&gt;和手动更新&lt;strong&gt;View&lt;/strong&gt;，MVVM显得更加精简，如果使用绑定的话。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;MVVM是非常吸引人的，因为它含有上述模式的优点，而且它并不需要额外的代码来更新视图，这归功于视图绑定。同时，它的可测试性仍然不错。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;viper&quot;&gt;VIPER&lt;/h3&gt;

&lt;h4 id=&quot;ios&quot;&gt;将乐高的建造经验转化成iOS应用设计&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.objc.io/issues/13-architecture/viper/&quot;&gt;VIPER&lt;/a&gt;是我们最后要讲的东西，它非常有趣，因为它不是来自任何MV(X)类型。&lt;/p&gt;

&lt;p&gt;现在，你必定认为职责中的的粒度是非常棒的。VIPER创建了另外一种职责分离的重述。此时此刻我们有&lt;strong&gt;五&lt;/strong&gt;层。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*0pN3BNTXfwKbf08lhwutag.png&quot; alt=&quot;Mou icon&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Interactor&lt;/strong&gt; – 包含关于数据(&lt;strong&gt;实体&lt;/strong&gt;)或者网络的业务逻辑，就像创建新的实体示例和通过服务器获取它们。或许你会因为其他目的使用类似&lt;em&gt;Services&lt;/em&gt;和&lt;em&gt;Managers&lt;/em&gt;，这些并不属于VIPER部分的额外依赖。	&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Presenter&lt;/strong&gt; – 包含UI相关(但是UIKit独立)业务逻辑，触发&lt;strong&gt;Interactor&lt;/strong&gt;方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Entities&lt;/strong&gt; – 简单的数据对象，并不是数据存取层，因为这是&lt;strong&gt;Interactor&lt;/strong&gt;的职责。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Router&lt;/strong&gt; –  负责VIPER的&lt;strong&gt;modules&lt;/strong&gt;后续处理。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本上来说，VIPER模块可以是&lt;strong&gt;一屏&lt;/strong&gt;或者是我们应用程序的整个用户&lt;strong&gt;故事板&lt;/strong&gt; – 就认证来说，它可能是&lt;strong&gt;一屏&lt;/strong&gt;或者是几个相关的组成。你想你的LEGO块多小呢？– 取决于你自己。&lt;/p&gt;

&lt;p&gt;如果我们拿它和MV(x)比较，我们能够看到某些责任分布上的区别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;（数据交互）逻辑迁移到&lt;strong&gt;Interactor&lt;/strong&gt;以及&lt;strong&gt;Entities&lt;/strong&gt;作为哑数据结构。&lt;/li&gt;
  &lt;li&gt;只是&lt;strong&gt;Controller/Presenter/ViewModel&lt;/strong&gt;的UI展示逻辑放到了&lt;strong&gt;Presenter&lt;/strong&gt;，并不是其数据改变能力。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VIPER&lt;/strong&gt; 是第一个显式使用&lt;strong&gt;Router&lt;/strong&gt;来处理导航的模式。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用正确的方式来处理路由是iOS应用程序的难点，MV(x)并不能解决这问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个例子并不能覆盖&lt;strong&gt;路由&lt;/strong&gt;或者&lt;strong&gt;模块之间的交互&lt;/strong&gt;，就像这些主题并没有完全覆盖MV(X)一样。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt; &lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Entity (usually more complex e.g. NSManagedObject)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Transport data structure (not Entity)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;provideGreetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receiveGreetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingInteractor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;provideGreetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;David&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blaine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// usually comes from data access layer&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receiveGreetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewEventHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapShowGreetingButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingPresenter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewEventHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greetingProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapShowGreetingButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;provideGreetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receiveGreetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greetingData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greetingData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eventHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewEventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;showGreetingButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greetingLabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showGreetingButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;didTapButton:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didTapButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;didTapShowGreetingButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// layout code goes here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Assembling of VIPER module, without Router&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;presenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;interactor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GreetingInteractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetingProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interactor&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;interactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presenter&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;同样的，我们看看它的特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;分布 – 毫无疑问，VIPER是职责分类中最好的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可测试性 – 毫无疑问，职责分布越好，可测试越好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用性 – 最后，就如同你猜的，前两者将会占用你大量时间来维护。你不得不为职责不大的类写大量界面。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-7&quot;&gt;因此，乐高呢 ?&lt;/h4&gt;
&lt;p&gt;当使用VIPER，你就如同使用乐高块建造一个庞大帝国一样，同时这也会导致你遇到&lt;a href=&quot;https://inessential.com/2014/03/16/smaller_please&quot;&gt;问题&lt;/a&gt; 。或许，使用VIPER为时过早，你应该简单的看待事情。某些人忽略了这些东西而继续大材小用。我设想他们认为他们的应用能够在将来获得许多有益的东西，即使现在维护成本有点不可思议的高。如果你也是这么认为的话，我建议你去尝试一下&lt;a href=&quot;https://github.com/rambler-ios/Generamba&quot;&gt;Generamba&lt;/a&gt; – 一个能够建立VIPER框架的工具。尽管我认为，它有点像对麻雀使用&lt;strong&gt;自动瞄准系统&lt;/strong&gt;而不是弹弓。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;我们对几个框架模式进行了梳理，我希望你能够从中解决你所遇到的疑惑，毫无疑问你认识到，没有任何模式是万能的，在特定的场合，通过掂量和权衡来选择架构模式。&lt;/p&gt;

&lt;p&gt;因此，在同一个app中可能有几种架构的混合搭配。 例如，你可能一开始使用MVC，但是你遇到一个难以使用MVC来有效的解决场景，你可能会迁移到MVVM，但只是因为某个场景使用，完全没必要重构其他场景，因为在其他场景中，MVC能够工作的很好，因为这些架构都能很容易兼容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make everything as simple as possible, but not simpler — Albert Einstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;end&quot;&gt;END&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;日期&lt;/th&gt;
      &lt;th&gt;作者&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2017-01-21&lt;/td&gt;
      &lt;td&gt;YC&lt;/td&gt;
      &lt;td&gt;初步翻译完成&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;本文翻译自&lt;/strong&gt; &lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture- patterns-ecba4c38de52#.67bu0gn15&quot;&gt;iOSArchitecturePatterns&lt;/a&gt;&lt;/p&gt;</content><author><name>一朵云风</name></author><category term="ios architecture" /><summary type="html">Translate-iOS-Architecture-Patterns</summary></entry><entry><title type="html">JavaScript-Learning-js闭包</title><link href="http://localhost:4000/JavaScript-Learning-js%E9%97%AD%E5%8C%85/" rel="alternate" type="text/html" title="JavaScript-Learning-js闭包" /><published>2017-01-12T00:00:00+08:00</published><updated>2017-01-12T00:00:00+08:00</updated><id>http://localhost:4000/JavaScript-Learning-js%E9%97%AD%E5%8C%85</id><content type="html" xml:base="http://localhost:4000/JavaScript-Learning-js%E9%97%AD%E5%8C%85/">&lt;p&gt;目录&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;块级作用域与函数级作用域 &lt;/li&gt;
  &lt;li&gt;闭包基本知识 &lt;/li&gt;
  &lt;li&gt;作用域基本知识&lt;/li&gt;
  &lt;li&gt;IIFE 立即执行的函数表达式  &lt;/li&gt;
  &lt;li&gt;let 关键字&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;块级作用域与函数级作用域&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。
函数作用域就好理解了，定义在函数中的参数和变量在函数外部是不可见的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   	 &lt;span class=&quot;cm&quot;&gt;/* 这里的i可见  */&lt;/span&gt;	  
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 这里的i未定义 */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
 	&lt;span class=&quot;cm&quot;&gt;/* 这里的i可见*/&lt;/span&gt;	
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* 这里的i可见 */&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;得出结论:&lt;/p&gt;

&lt;p&gt;js是函数级别作用域。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;闭包基本知识&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;闭包的解释&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;闭包是指那些能够访问独立(自由)变量的函数 (变量在本地使用，但定义在一个封闭的作用域中)。换句话说，这些函数可以“记忆”它被创建时候的环境。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;闭包的产生&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;由于 JavaScript 中，函数是对象，对象是属性的集合，而属性的值又可以是对象，则在函数内定义函数成为理所当然，如果在函数 func 内部声明函数 inner，然后在函数外部调用 inner，这个过程即产生了一个闭包。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 定义变量i &lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 内部函数 &lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 产生一个闭包 &lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// alert(100)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-2&quot;&gt;作用域基本知识&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;作用域的解释&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;在 JavaScript 中，变量的作用域是由它在源代码中所处位置决定的（显然如此），并且嵌套的函数可以访问到其外层作用域中声明的变量。
 作用域链的原理和原型链很类似，如果这个变量在自己的作用域中没有，那么它会寻找父级的，直到最顶层。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;	&lt;span class=&quot;cm&quot;&gt;/*! 定义全局变量 g_i */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/*! 定义变量i */&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
		&lt;span class=&quot;cm&quot;&gt;/*! 内部函数 */&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
	&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// alert(201)&lt;/span&gt;
	
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;iife-&quot;&gt;IIFE 立即执行的函数表达式&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;IIFE的解释&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;IIFE (立即调用函数表达式) 是一个 JavaScript 函数 ，它会在定义时立即执行。
IIFE的引用主要是限制变量的生命周期,以及可以用来锁定值并且有效的保存当时的状态。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IIFE的应用&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/*! 定义变量i */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;cm&quot;&gt;/*! 内部函数 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/*! 定义变量j*/&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*! 这里可以访问j变量*/&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 	

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// alert (201) , alert(101)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如何限制变量j的生命周期的,通过引用一个立即调用函数表达式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/*! 定义变量i */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;cm&quot;&gt;/*! 内部函数 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/*! 这里引用立即调用函数表达式 */&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/*! 定义变量j*/&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*! 这里无法访问j变量*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 	

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// alert (201)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;下面看一个例子&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indicators&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;li&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indicators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		 &lt;span class=&quot;nx&quot;&gt;indicators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		 	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当你点击指示器的时候,我们会发现执行结果是alert(indicators.length),并非我们期望的 alert(i)。
也就是onclick事件触发时候, i的值是循环后最后的值。(ps: 通过闭包以及作用域我们知道事件触发时候i当时的值是最后的值)。&lt;/p&gt;

&lt;p&gt;FAQ : 那怎么去锁定值i并且有效的保存当时的状态. 通过引用一个立即调用函数表达式即可。&lt;/p&gt;

&lt;p&gt;Answer: 使用IIFE。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indicators&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;li&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indicators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		 &lt;span class=&quot;nx&quot;&gt;indicators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		 	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*! 通过IIFE来锁定值i并且有效的保存当时的状态 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当你点击指示器的时候,执行结果就是你点击对应的指示器index。&lt;/p&gt;

&lt;h3 id=&quot;let&quot;&gt;let关键字&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;let解释&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;let 允许把变量的作用域限制在块级域中。与 var 不同处是：var 声明变量要么是全局的，要么是函数级的，而无法是块级的。    &lt;br /&gt;
let声明的变量作用域包含定义它的块以及任何包含的子块中。在这方面，let与var非常像。它们之间主要的区别在于一个var变量的作用域是整个封闭函数。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在上个例子,我们通过IIFE来锁定值i并且有效的保存当时的状态,主要是因为var是函数级作用域的原因。接着我们看看let关键字(块作用域)如何来实现锁定值i并且有效的保存当时的状态。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indicators&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;li&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 替换var */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indicators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
	 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
		 &lt;span class=&quot;nx&quot;&gt;indicators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		 	&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;😁 是不是超级熟悉,这不就是我们很常用的语法么!&lt;/p&gt;

&lt;h3 id=&quot;end&quot;&gt;End&lt;/h3&gt;</content><author><name>一朵云风</name></author><category term="js closure" /><summary type="html">JavaScript-Learning-js闭包</summary></entry><entry><title type="html">UIKit-Learning-UIScrollView And AutoLayout</title><link href="http://localhost:4000/UIKit-Learning-UIScrollView-And-AutoLayout/" rel="alternate" type="text/html" title="UIKit-Learning-UIScrollView And AutoLayout" /><published>2017-01-01T00:00:00+08:00</published><updated>2017-01-01T00:00:00+08:00</updated><id>http://localhost:4000/UIKit-Learning-UIScrollView%20And%20AutoLayout</id><content type="html" xml:base="http://localhost:4000/UIKit-Learning-UIScrollView-And-AutoLayout/">&lt;p&gt;Ques: UIScrollView 是如何使得其内容视图滚动显示的。&lt;/p&gt;

&lt;p&gt;Answser: 通过改变UIScrollView自身的Position,也就是bounds。&lt;/p&gt;

&lt;p&gt;Ques: Frame 和 Bound 的区别是什么呢? &lt;/p&gt;

&lt;p&gt;Answser: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Frame 是用来描述视图的位置以及尺寸 (在父视图的坐标系统)&lt;/li&gt;
  &lt;li&gt;Bound 是用来描述视图的位置以及尺寸 (在自己的坐标系统)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ques: UIScrollView 如何实现自动布局呢?&lt;/p&gt;

&lt;p&gt;Answser: &lt;/p&gt;

&lt;p&gt;UIScrollView 通过修改它的bounds来滚动它的内容视图,如何使得能在自动布局下工作呢,这是通过在scrollView内的left,right,top,bottom edge,即是contentView的edge。&lt;/p&gt;

&lt;p&gt;所以我们需要建立一个UIScrollView内置子视图(contentView)来设置它的edge.&lt;/p&gt;

&lt;p&gt;代码如下:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;	&lt;span class=&quot;n&quot;&gt;UIScrollView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrollView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIScrollView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrollView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sclView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mas_makeConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MASConstraintMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
		
	&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sclView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mas_makeConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MASConstraintMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	  	&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sclView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	  	&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sclView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
	
	&lt;span class=&quot;cm&quot;&gt;/*! Add your subview to the contentView */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reference: &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/technotes/tn2154/_index.html&quot;&gt;UIScrollView With AutoLayout&lt;/a&gt;&lt;/p&gt;</content><author><name>一朵云风</name></author><category term="iOS UIScrollView AutoLayout" /><summary type="html">UIKit-Learning-UIScrollView And AutoLayout</summary></entry><entry><title type="html">Interview-Learning-00001</title><link href="http://localhost:4000/Interview-Learning-00001/" rel="alternate" type="text/html" title="Interview-Learning-00001" /><published>2016-12-22T00:00:00+08:00</published><updated>2016-12-22T00:00:00+08:00</updated><id>http://localhost:4000/Interview-Learning-00001</id><content type="html" xml:base="http://localhost:4000/Interview-Learning-00001/">&lt;p&gt;今天在群里看到有同学发了两道华为的面试题目，就看了一下如何解决。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;编写一个程序,要求计算从1+2+3+…100
每加一次输出一次结果.
程序不得超过20行
在程序中不得出现for,while关键字。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; /*! 递归函数,用于计算1+2+3+... */
 - (NSUInteger)dg:(NSUInteger)i {
     if (i == 0) {
         return 0;
     }
     i +=  [self dg:i - 1];
     NSLog(@&quot;%ld&quot;,i);
     return i;
 }
	
 /*! 执行函数 */
 [self dg:100]
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一个人买汽水, 1块钱一瓶汽水,2个空瓶可以换一瓶汽水,3个瓶盖可以换一瓶汽水.这个人有20块钱,问:总共能喝多少汽水.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#####按照题意 逐步推导一下:&lt;/p&gt;

&lt;p&gt;定义 M = 一块钱， W = 一瓶水，PG = 一个瓶盖 ， KP = 一个空瓶。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;1M = 1W&lt;/p&gt;

&lt;p&gt;Left:&lt;/p&gt;

&lt;p&gt;1PG + 1KP&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2M = 4W&lt;/p&gt;

&lt;p&gt;LEFT&lt;/p&gt;

&lt;p&gt;1KP&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;3M = 6W&lt;/p&gt;

&lt;p&gt;LEFT&lt;/p&gt;

&lt;p&gt;1KP + 2PG&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;4M = 11W&lt;/p&gt;

&lt;p&gt;LEFT&lt;/p&gt;

&lt;p&gt;1KP&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;5M = 13W&lt;/p&gt;

&lt;p&gt;LEFT &lt;/p&gt;

&lt;p&gt;1KP + 2PG&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2| 4 

3| 4 + 2 

4| 4 + 2 + 5

5| 4 + 2 + 5 + 2

6| 4 + 2 + 5 + 2 + 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;推导一下,得出规律:&lt;/p&gt;

&lt;p&gt;偶数 + 5&lt;/p&gt;

&lt;p&gt;奇数 + 2&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ADT:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	int total = 4; /*! 2元钱开始计算 */
	for (int i = 3; i &amp;lt;= 20; i++) {
		if (i % 2 == 0) 
			total += 5;
		else 
			total += 2;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;PS : 若使用程序来解决,原来是这样。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int money = 20; // 金额
int emptyBottle = 0; // 空瓶 
int BottleCap = 0; // 瓶盖
int mineral = 0;  // 瓶数
for (int i = 0; i &amp;lt; money;i++) {
	mineral ++；
	emptyBottle++;
	BottleCap++;
	if(emptyBottle == 2) {
		mineral ++;
		emptyBottle = 0;
	}
	if(BottleCap == 3) {
		mineral ++;
		BottleCap = 0;
	}
}

System.out.println(mineral);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>一朵云风</name></author><category term="Interview 2017" /><summary type="html">Interview-Learning-00001</summary></entry><entry><title type="html">Summary - 2016 Year</title><link href="http://localhost:4000/Summary-2016Summary/" rel="alternate" type="text/html" title="Summary - 2016 Year" /><published>2016-12-22T00:00:00+08:00</published><updated>2016-12-22T00:00:00+08:00</updated><id>http://localhost:4000/Summary-2016Summary</id><content type="html" xml:base="http://localhost:4000/Summary-2016Summary/">&lt;p&gt;一下子就不知不觉步入了2017年，回首2016做个总结吧。&lt;/p&gt;

&lt;p&gt;2016 主要是带队做事情,在过程中学习了如何去引导他人，指导他人，并学会取舍，懂的公司的目标是最重要的，并且也确定了以后的职业方向。&lt;/p&gt;

&lt;p&gt;技术方面，iOS还是以解决问题为主，毕竟经验都是实战中积累的，主要接触了腾讯云即时通讯以及最火的直播功能。简单学习了一下前端，主要是以html+css+div为主。&lt;/p&gt;

&lt;p&gt;思维方面，学会了如何多方面考虑产品需求，提前做好规划等。而不是凭感觉去定义某些事情，要去实践认知的过程中取得有用的经验。做事情可以依靠许多工具来辅助解决，愿望清单，脑图，以及google keep等，一步一步规划清晰目标，并加强执行力，毕竟行动胜于一切。&lt;/p&gt;

&lt;p&gt;玩方面，今年去一趟海南岛，爸妈以及哥哥的第二故乡，领悟挺多。还去一趟龙门铁泉，泡泡温泉，舒服一下。有什么好玩的地方，记得告诉我哦！&lt;/p&gt;

&lt;p&gt;2017， 规划方面，希望能够提升项目管理能力，后端开发尝尝鲜，接触一下新的语言，跟上时代的步伐。 &lt;/p&gt;</content><author><name>一朵云风</name></author><category term="summary 2016" /><summary type="html">Summary - 2016 Year</summary></entry><entry><title type="html">CocoaPod-Learning-如何制作一个CocoaPod(1)</title><link href="http://localhost:4000/CocoaPod-Learning-%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AACocoaPo(1)/" rel="alternate" type="text/html" title="CocoaPod-Learning-如何制作一个CocoaPod(1)" /><published>2016-12-22T00:00:00+08:00</published><updated>2016-12-22T00:00:00+08:00</updated><id>http://localhost:4000/CocoaPod-Learning-%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AACocoaPo(1)</id><content type="html" xml:base="http://localhost:4000/CocoaPod-Learning-%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AACocoaPo(1)/">&lt;h3 id=&quot;section&quot;&gt;创建一个仓库来存放库文件:&lt;/h3&gt;
&lt;figure class=&quot;&quot;&gt;
    &lt;img src=&quot;/assets/img/2016-12-21-how_to_make_an_cocoapod/1.png&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;section-1&quot;&gt;建立目录结构:&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ 	git clone https://github.com/XuYanci/YCPodTestLibrary 

$	cd YCPodTestLibrary

$	mkdir PodTestLibrary

$	cd PodTestLibrary

$	mkdir Assets	(ps:存放资源文件、例如图片)

$	mkdir Classes  (ps:存放库源文件,例如Helper.h,Helper.m)

$	cd ../  		(ps:返回YCPodTestLibrary 根目录)

$	touch LICENSE 

$	touch README	(ps:自定义文字内容)

$	touch YanciXuPodTestLibrary.podspec
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
	&lt;figcaption&gt;目录树结构&lt;/figcaption&gt;
    &lt;img src=&quot;/assets/img/2016-12-21-how_to_make_an_cocoapod/3.png&quot; /&gt;
&lt;/figure&gt;

&lt;h5 id=&quot;license&quot;&gt;LICENSE文件:&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Copyright (c) 2016 who &amp;lt;who@gmail.com&amp;gt;
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;podsepc&quot;&gt;PodSepc文件&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#
# Be sure to run `pod lib lint podTestLibrary.podspec' to ensure this is a
# valid spec before submitting.
#
# Any lines starting with a # are optional, but their use is encouraged
# To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html
#
Pod::Spec.new do |s|
  s.name             = 'YanciXuPodTestLibrary' 
  s.version          = '0.1.0'
  s.summary          = 'A short description of YCPodTestLibrary.'
# This description is used to generate tags and improve search results.
#   * Think: What does it do? Why did you write it? What is the focus?
#   * Try to keep it short, snappy and to the point.
#   * Write the description between the DESC delimiters below.
#   * Finally, don't worry about the indent, CocoaPods strips it!
  s.description      = &amp;lt;&amp;lt;-DESC
TODO: Add long description of the pod here.
                       DESC
  s.homepage         = 'https://github.com/XuYanci/YCPodTestLibrary.git' ()
  # s.screenshots     = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2'
  s.license          = { :type =&amp;gt; 'MIT', :file =&amp;gt; 'LICENSE' }
  s.author           = { 'XuYanci' =&amp;gt; 'grandy.wind@gmail.com' }
  # @note 第一步生成gitrepo地址
  s.source           = { :git =&amp;gt; 'https://github.com/XuYanci/YCPodTestLibrary.git', :tag =&amp;gt; s.version.to_s }
  # s.social_media_url = 'https://twitter.com/&amp;lt;TWITTER_USERNAME&amp;gt;'
  s.ios.deployment_target = '8.0'
  # @note 第一步生成的目录,用于存放Lib源文件 (.h,.m)
  s.source_files = 'podTestLibrary/Classes/**/*'
  # @note 第一步生成的目录,用于存放Lib资源文件 (.png)
  s.resource_bundles = {
     'podTestLibrary' =&amp;gt; ['podTestLibrary/Assets/*.png']
   }
  # s.public_header_files = 'Pod/Classes/**/*.h'
  # s.frameworks = 'UIKit', 'MapKit'
  # s.dependency 'AFNetworking', '~&amp;gt; 2.3'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;libgithub-repo&quot;&gt;上传Lib到Github Repo&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$  cd	YCPodTestLibrary	
$  git add . 
$  git commit -m &quot;release 0.1.0&quot;
$  git push origin master   (ps:https://github.com/XuYanci/YCPodTestLibrary.git)
$  git tag -a 0.1.0 
$  git push -tags
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;podsepc-1&quot;&gt;验证podsepc是否有效&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$	pod lib lint --allow-warnings  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
 	&lt;figcaption&gt;验证通过&lt;/figcaption&gt;
    &lt;img src=&quot;/assets/img/2016-12-21-how_to_make_an_cocoapod/4.png&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;cocoapod&quot;&gt;推送到cocoapod&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ 	pod trunk push [name].podspec 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;figure class=&quot;&quot;&gt;
	&lt;figcaption&gt;🚀 祝贺你,你可以搜索和使用你的pod了&lt;/figcaption&gt;
    &lt;img src=&quot;/assets/img/2016-12-21-how_to_make_an_cocoapod/2.png&quot; /&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://guides.cocoapods.org&quot;&gt;https://guides.cocoapods.org&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://my.oschina.net/u/727843/blog/392784&quot;&gt;https://my.oschina.net/u/727843/blog/392784&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>一朵云风</name></author><category term="github cocoapod" /><summary type="html">CocoaPod-Learning-如何制作一个CocoaPod(1)</summary></entry></feed>
